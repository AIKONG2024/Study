import numpy as np
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split, KFold, cross_val_score, StratifiedKFold, cross_val_predict
import pandas as pd
from sklearn.utils import all_estimators
import warnings
warnings.filterwarnings('ignore')

#1. 데이터
x,y = load_breast_cancer(return_X_y=True)

x_train, x_test, y_train , y_test = train_test_split(
    x, y, shuffle= True, random_state=123, train_size=0.8,
    stratify= y
)

from sklearn.preprocessing import (
    MinMaxScaler,
    StandardScaler,
)
scaler = MinMaxScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

n_splits = 5
kf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=123)

# 모델구성
allAlgorithms = all_estimators(type_filter='classifier') #41개
# allAlgorithms = all_estimators(type_filter='regressor') #55개
best_score = 0
best_model = ""

# 모델구성
from sklearn.metrics import accuracy_score
for name, algorithm in allAlgorithms :
    try:
        model = algorithm()
        scores = cross_val_score(model, x_train, y_train, cv=kf)
        y_predict = cross_val_predict(model, x_test, y_test, cv=kf)
        acc_score = accuracy_score(y_test, y_predict)
        # 모델
        if best_score < acc_score:
            best_score = acc_score
            best_model = name
        # 3. 훈련
        # 평가, 예측
        print(f"""
=========================================================
[{name}]
acc : {scores} 
평균 acc : {round(np.mean(scores),4)}
eval acc : // {acc_score}
        """)
    except:
        continue
    
print("="*60)
print("[The Best score] : ", best_score )
print("[The Best model] : ", best_model )
print("="*60)

'''
========================================================= 
[AdaBoostClassifier]
acc : [0.98901099 0.95604396 0.95604396 0.92307692 0.97802198] || 평균 acc : 0.9604
eval acc : // 0.9473684210526315


========================================================= 
[BaggingClassifier]
acc : [0.95604396 0.95604396 0.95604396 0.9010989  0.95604396] || 평균 acc : 0.9451
eval acc : // 0.9385964912280702


========================================================= 
[BernoulliNB]
acc : [0.6043956  0.6043956  0.62637363 0.62637363 0.62637363] || 평균 acc : 0.6176
eval acc : // 0.631578947368421


========================================================= 
[CalibratedClassifierCV]
acc : [0.97802198 0.98901099 0.97802198 0.95604396 0.95604396] || 평균 acc : 0.9714
eval acc : // 0.9473684210526315


========================================================= 
[DecisionTreeClassifier]
acc : [0.93406593 0.92307692 0.9010989  0.86813187 0.92307692] || 평균 acc : 0.9099
eval acc : // 0.9210526315789473


========================================================= 
[DummyClassifier]
acc : [0.62637363 0.62637363 0.62637363 0.62637363 0.62637363] || 평균 acc : 0.6264
eval acc : // 0.631578947368421


========================================================= 
[ExtraTreeClassifier]
acc : [0.91208791 0.92307692 0.91208791 0.9010989  0.93406593] || 평균 acc : 0.9165
eval acc : // 0.9385964912280702


========================================================= 
[ExtraTreesClassifier]
acc : [0.97802198 0.97802198 0.95604396 0.91208791 0.96703297] || 평균 acc : 0.9582
eval acc : // 0.956140350877193


========================================================= 
[GaussianNB]
acc : [0.94505495 0.95604396 0.93406593 0.89010989 0.94505495] || 평균 acc : 0.9341
eval acc : // 0.9385964912280702


========================================================= 
[GaussianProcessClassifier]
acc : [0.96703297 0.95604396 0.96703297 0.92307692 0.96703297] || 평균 acc : 0.956
eval acc : // 0.9649122807017544


========================================================= 
[GradientBoostingClassifier]
acc : [0.98901099 0.96703297 0.97802198 0.93406593 0.96703297] || 평균 acc : 0.967
eval acc : // 0.9122807017543859


========================================================= 
[HistGradientBoostingClassifier]
acc : [0.97802198 0.95604396 0.98901099 0.95604396 0.96703297] || 평균 acc : 0.9692
eval acc : // 0.9473684210526315


========================================================= 
[KNeighborsClassifier]
acc : [0.98901099 0.98901099 0.96703297 0.94505495 0.96703297] || 평균 acc : 0.9714
eval acc : // 0.9649122807017544


========================================================= 
[LabelPropagation]
acc : [0.97802198 1.         0.96703297 0.93406593 0.96703297] || 평균 acc : 0.9692
eval acc : // 0.9473684210526315


========================================================= 
[LabelSpreading]
acc : [0.97802198 0.98901099 0.95604396 0.93406593 0.96703297] || 평균 acc : 0.9648
eval acc : // 0.9473684210526315


========================================================= 
[LinearDiscriminantAnalysis]
acc : [0.96703297 0.95604396 0.95604396 0.95604396 0.95604396] || 평균 acc : 0.9582
eval acc : // 0.9298245614035088


========================================================= 
[LinearSVC]
acc : [0.98901099 0.98901099 0.98901099 0.95604396 0.96703297] || 평균 acc : 0.978
eval acc : // 0.956140350877193


========================================================= 
[LogisticRegression]
acc : [0.96703297 0.96703297 0.97802198 0.92307692 0.96703297] || 평균 acc : 0.9604
eval acc : // 0.956140350877193


========================================================= 
[LogisticRegressionCV]
acc : [0.98901099 0.98901099 0.98901099 0.95604396 0.96703297] || 평균 acc : 0.978
eval acc : // 0.956140350877193


========================================================= 
[MLPClassifier]
acc : [0.98901099 0.94505495 0.98901099 0.96703297 0.97802198] || 평균 acc : 0.9736
eval acc : // 0.9298245614035088


========================================================= 
[NearestCentroid]
acc : [0.92307692 0.94505495 0.92307692 0.89010989 0.95604396] || 평균 acc : 0.9275
eval acc : // 0.956140350877193


========================================================= 
[NuSVC]
acc : [0.95604396 0.95604396 0.93406593 0.92307692 0.95604396] || 평균 acc : 0.9451
eval acc : // 0.956140350877193


========================================================= 
[PassiveAggressiveClassifier]
acc : [0.97802198 0.9010989  0.92307692 0.95604396 0.95604396] || 평균 acc : 0.9429
eval acc : // 0.9122807017543859


========================================================= 
[Perceptron]
acc : [0.98901099 0.83516484 0.98901099 0.94505495 0.97802198] || 평균 acc : 0.9473
eval acc : // 0.956140350877193


========================================================= 
[QuadraticDiscriminantAnalysis]
acc : [0.96703297 0.94505495 0.94505495 0.94505495 0.94505495] || 평균 acc : 0.9495
eval acc : // 0.8596491228070176


========================================================= 
[RandomForestClassifier]
acc : [0.97802198 0.96703297 0.95604396 0.95604396 0.95604396] || 평균 acc : 0.9626
eval acc : // 0.9210526315789473


========================================================= 
[RidgeClassifier]
acc : [0.95604396 0.95604396 0.96703297 0.94505495 0.95604396] || 평균 acc : 0.956
eval acc : // 0.9824561403508771


========================================================= 
[RidgeClassifierCV]
acc : [0.96703297 0.96703297 0.95604396 0.96703297 0.95604396] || 평균 acc : 0.9626
eval acc : // 0.9824561403508771


========================================================= 
[SGDClassifier]
acc : [0.96703297 0.98901099 0.97802198 0.95604396 0.95604396] || 평균 acc : 0.9692
eval acc : // 0.9473684210526315


========================================================= 
[SVC]
acc : [1.         1.         0.98901099 0.93406593 0.96703297] || 평균 acc : 0.978
eval acc : // 0.9649122807017544

============================================================
[The Best score] :  0.9824561403508771
[The Best model] :  RidgeClassifier
============================================================
'''